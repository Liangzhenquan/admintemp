{"version":3,"sources":["components/Loading.jsx","router/config.js","router/menu.js","router/index.js","utils/storage.js","components/ErrorBoundary.jsx","App.js","serviceWorker.js","index.js"],"names":["Loading","NProgress","start","useEffect","done","routes","path","exact","component","lazy","RouteWithRoutes","route","render","props","Suspense","fallback","RouteWithSubRoutes","to","map","i","key","menus","title","icon","sub","setLocalStorage","value","val","JSON","stringify","localStorage","setItem","ErrorBoundary","state","hasError","error","errorInfo","console","log","this","children","Component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"mJAWeA,MAPf,WAKE,OAJAC,IAAUC,QACVC,qBAAU,WACRF,IAAUG,SACT,IACI,MCIHC,EAAS,CACb,CACEC,KAAM,SACNC,OAAO,EACPC,UAdUC,gBAAK,kBAAM,sEAgBvB,CACEH,KAAM,OACNC,OAAO,EACPC,UAjBYC,gBAAK,kBAAM,gEAmBzB,CACEH,KAAM,IACNE,UApBSC,gBAAK,kBAAM,qEAqBpBJ,OAAQ,CACN,CACEC,KAAM,SACNE,UArBMC,gBAAK,kBAAM,mCAuBnB,CACEH,KAAM,SACNE,UAxBMC,gBAAK,kBAAM,mCA0BnB,CACEH,KAAM,SACNE,UA3BMC,gBAAK,kBAAM,mCA6BnB,CACEH,KAAM,SACNE,UA9BMC,gBAAK,kBAAM,sCAmCzB,SAASC,EAAgBC,GACvB,OACE,kBAAC,IAAD,CACEL,KAAMK,EAAML,KACZM,OAAQ,SAAAC,GAAK,OACX,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,kBAAC,EAAD,OACxB,kBAACJ,EAAMH,UAAP,iBAAqBK,EAArB,CAA4BR,OAAQM,EAAMN,cAMpD,SAASW,EAAT,GAAyC,IAAXX,EAAU,EAAVA,OAC5B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,OAAK,EAACD,KAAK,KAChB,kBAAC,IAAD,CAAUW,GAAG,YAEdZ,EAAOa,KAAI,SAACP,EAAOQ,GAAR,OACV,kBAACT,EAAD,eAAiBU,IAAKD,GAAOR,OAE/B,kBAAC,IAAD,CAAOL,KAAK,KACV,kBAAC,IAAD,CAAUW,GAAG,WCrErB,IAgCeI,EAhCD,CACZ,CACEC,MAAO,eACPF,IAAK,SACLG,KAAM,QAER,CACED,MAAO,OACPF,IAAK,QACLG,KAAM,OACNC,IAAK,CACH,CACEF,MAAO,QACPF,IAAK,UAEP,CACEE,MAAO,QACPF,IAAK,YAIX,CACEE,MAAO,eACPF,IAAK,QACLI,IAAK,CACH,CACEF,MAAO,gBACPF,IAAK,aC3Bb,yI,gCCAA,sCAAMK,EAAkB,SAACL,EAAKM,GAC5B,IAAIC,EAAMD,EACW,kBAAVA,IACTC,EAAMC,KAAKC,UAAUH,IAEvBI,aAAaC,QAAQX,EAAKO,K,6KCsBbK,EAzBf,YACE,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KACDoB,MAAQ,CAAEC,UAAU,GAFR,EADrB,+EAQoBC,EAAOC,GAEvBC,QAAQC,IAAIH,EAAOC,KAVvB,+BAYY,IAAD,EACwBG,KAAK1B,MAA5B2B,EADD,EACCA,SAAUzB,EADX,EACWA,SAElB,OADqBwB,KAAKN,MAAlBC,SAEFnB,EACK,KAEF,mDAEFyB,KArBX,gDAKkCL,GAC9B,MAAO,CAAED,UAAU,OANvB,GAAmCO,a,0CCiCpBC,MAvBf,WAOE,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGrC,IAAOa,KAAI,SAACP,EAAOQ,GAAR,OACV,kBAAC,IAAD,eAAiBC,IAAKD,GAAOR,OAE/B,kBAAC,IAAD,CAAOL,KAAK,KACV,kBAAC,IAAD,CAAUW,GAAG,cCfL0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASpC,OAAO,kBAAC,EAAD,MAASqC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtB,GACLE,QAAQF,MAAMA,EAAMuB,c","file":"static/js/main.7fb07043.chunk.js","sourcesContent":["// 进度条\r\nimport React, { useEffect } from 'react';\r\nimport NProgress from 'nprogress';\r\nimport 'nprogress/nprogress.css';\r\nfunction Loading() {\r\n  NProgress.start();\r\n  useEffect(() => {\r\n    NProgress.done();\r\n  }, []);\r\n  return null;\r\n}\r\nexport default Loading;\r\n","import React, { lazy } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport Loading from '@/components/Loading';\r\nconst Login = lazy(() => import('@/views/Login'));\r\n\r\nconst NoMatch = lazy(() => import('@/views/error/NoMatch'));\r\nconst Home = lazy(() => import('@/containers'));\r\n\r\n//二级页面\r\nconst Item1 = lazy(() => import('@/views/home/Item1'));\r\nconst Item2 = lazy(() => import('@/views/home/Item2'));\r\nconst Item3 = lazy(() => import('@/views/home/Item3'));\r\nconst Item4 = lazy(() => import('@/views/home/Item4'));\r\nconst routes = [\r\n  {\r\n    path: '/login',\r\n    exact: true,\r\n    component: Login\r\n  },\r\n  {\r\n    path: '/404',\r\n    exact: true,\r\n    component: NoMatch\r\n  },\r\n  {\r\n    path: '/',\r\n    component: Home,\r\n    routes: [\r\n      {\r\n        path: '/item1',\r\n        component: Item1\r\n      },\r\n      {\r\n        path: '/item2',\r\n        component: Item2\r\n      },\r\n      {\r\n        path: '/item3',\r\n        component: Item3\r\n      },\r\n      {\r\n        path: '/item4',\r\n        component: Item4\r\n      }\r\n    ]\r\n  }\r\n];\r\nfunction RouteWithRoutes(route) {\r\n  return (\r\n    <Route\r\n      path={route.path}\r\n      render={props => (\r\n        <React.Suspense fallback={<Loading />}>\r\n          <route.component {...props} routes={route.routes} />\r\n        </React.Suspense>\r\n      )}\r\n    />\r\n  );\r\n}\r\nfunction RouteWithSubRoutes({ routes }) {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\">\r\n        <Redirect to=\"/item1\" />\r\n      </Route>\r\n      {routes.map((route, i) => (\r\n        <RouteWithRoutes key={i} {...route} />\r\n      ))}\r\n      <Route path=\"*\">\r\n        <Redirect to=\"/404\" />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport { routes, RouteWithRoutes, RouteWithSubRoutes };\r\n","const menus = [\r\n  {\r\n    title: '首页',\r\n    key: '/item4',\r\n    icon: 'home'\r\n  },\r\n  {\r\n    title: 'item',\r\n    key: '/item',\r\n    icon: 'home',\r\n    sub: [\r\n      {\r\n        title: 'item1',\r\n        key: '/item1'\r\n      },\r\n      {\r\n        title: 'item2',\r\n        key: '/item2'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: '测试',\r\n    key: '/test',\r\n    sub: [\r\n      {\r\n        title: '测试1',\r\n        key: '/item3'\r\n      }\r\n    ]\r\n  }\r\n];\r\nexport default menus;\r\n","import { routes, RouteWithRoutes, RouteWithSubRoutes } from './config';\r\nimport menus from './menu';\r\nexport { routes, RouteWithRoutes, RouteWithSubRoutes, menus };\r\n","const setLocalStorage = (key, value) => {\r\n  let val = value;\r\n  if (typeof value === 'object') {\r\n    val = JSON.stringify(value);\r\n  }\r\n  localStorage.setItem(key, val);\r\n};\r\nconst getLocalStorage = key => {\r\n  let val = null;\r\n  if (localStorage.getItem(key)) {\r\n    val = localStorage.getItem(key);\r\n    val = JSON.parse(JSON.stringify(val));\r\n  }\r\n  return val;\r\n};\r\n\r\nexport { setLocalStorage, getLocalStorage };\r\n","import React, { Component } from 'react';\r\n// 错误边界\r\nexport class ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true };\r\n  }\r\n  componentDidCatch(error, errorInfo) {\r\n    // 你同样可以将错误日志上报给服务器\r\n    console.log(error, errorInfo);\r\n  }\r\n  render() {\r\n    const { children, fallback } = this.props;\r\n    const { hasError } = this.state;\r\n    if (hasError) {\r\n      if (fallback) {\r\n        return null;\r\n      }\r\n      return <div>崩溃了</div>;\r\n    }\r\n    return children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Suspense } from 'react';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport { getLocalStorage } from '@/utils/storage';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom';\nimport { routes, RouteWithRoutes } from './router';\nimport 'normalize.css';\nimport './styles/index.less';\nfunction App() {\n  // const token = getLocalStorage('token');\n  // const pathname = window.location.pathname;\n  // if (pathname === '/login' || pathname === '/404') {\n  // } else if (!token) {\n  //   window.location.href = '/login';\n  // }\n  return (\n    <ErrorBoundary>\n      <Router>\n        <Switch>\n          {routes.map((route, i) => (\n            <RouteWithRoutes key={i} {...route} />\n          ))}\n          <Route path=\"*\">\n            <Redirect to=\"/404\" />\n          </Route>\n        </Switch>\n      </Router>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}